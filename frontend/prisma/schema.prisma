// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int     @default(1800)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    password         String?
    image            String?
    accounts         Account[]
    sessions         Session[]
    credits          Int       @default(5)
    stripeCustomerId String?   @unique
    files            File[]
}

model File {
    id            String     @id @default(cuid())
    name          String
    s3Key         String
    status        FileStatus @default(QUEUED)
    clips         Clip[]
    translated_to Language?
    User          User       @relation(fields: [userId], references: [id])
    userId        String
    createdAt     DateTime   @default(now())

    @@index([s3Key])
}

model Clip {
    id        String   @id @default(cuid())
    name      String
    caption   String   @db.Text
    duration  Int
    createdAt DateTime @default(now())

    variants ClipVariant[]
    File     File          @relation(fields: [fileId], references: [id])
    fileId   String
}

model ClipVariant {
    id        String   @id @default(cuid())
    clipId    String
    type      ClipType
    s3Key     String   @unique
    createdAt DateTime @default(now())

    clip Clip @relation(fields: [clipId], references: [id])

    @@index([s3Key])
}

model CreditPlan {
    id            String   @id @default(cuid())
    slug          String   @unique
    title         String
    price         Float
    credits       Int
    description   String
    features      Json
    isPopular     Boolean  @default(false)
    stripePriceId String
    createdAt     DateTime @default(now())
}

enum ClipType {
    NORMAL
    VERTICAL
}

enum FileStatus {
    QUEUED
    PROCESSING
    PROCESSED
    NO_CREDITS
    DISALLOWED
    FAILED
}

enum Language {
    ENGLISH
    ARABIC
    FRENCH
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
